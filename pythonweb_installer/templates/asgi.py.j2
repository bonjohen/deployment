"""
ASGI configuration file.
Generated by PythonWeb Installer.
"""
import os
import sys
import logging

# Add the application directory to the Python path
app_dir = os.path.abspath(os.path.dirname(__file__))
if app_dir not in sys.path:
    sys.path.insert(0, app_dir)

# Set up logging
logging.basicConfig(
    filename='{{ log_file|default("asgi.log") }}',
    level=logging.{{ loglevel|default("INFO") }},
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)

# Import the application
try:
    from {{ app_module }} import {{ app_variable|default('app') }} as application
except ImportError as e:
    logging.error(f"Failed to import application: {e}")
    raise

# Set up static files (optional)
{% if static_dir|default(False) and static_url|default(False) %}
from whitenoise import WhiteNoise
application = WhiteNoise(application)
application.add_files('{{ static_dir }}', prefix='{{ static_url }}')
{% endif %}

# Set up debug mode
{% if debug|default(False) %}
application.debug = True
{% endif %}

# ASGI handler
async def application_handler(scope, receive, send):
    """
    ASGI application handler.
    """
    try:
        await application(scope, receive, send)
    except Exception as e:
        logging.error(f"Application error: {e}")
        await send({
            'type': 'http.response.start',
            'status': 500,
            'headers': [
                [b'content-type', b'text/plain'],
            ]
        })
        await send({
            'type': 'http.response.body',
            'body': b'Internal Server Error',
        })

# Use the handler in production
if not {{ debug|default(False) }}:
    application = application_handler
